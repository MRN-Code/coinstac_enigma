load("~/Documents/ENIGMADiseaseWorkingGroupStats/example_tutorial/results/ENIGMA_TUTORIAL_GCC_COVARIATES.RData")
load("~/Documents/ENIGMADiseaseWorkingGroupStats/example_tutorial/results/ENIGMA_TUTORIAL_GCC_NUM.RData")
load("~/Documents/ENIGMADiseaseWorkingGroupStats/example_tutorial/results/ENIGMA_TUTORIAL_GCC_NUM.RData")
load("~/Documents/ENIGMADiseaseWorkingGroupStats/example_tutorial/results/ENIGMA_TUTORIAL_GCC_COVARIATES.RData")
ID = "ENIGMA_TEST"
SITE="MDR"
DATADIR="/Users/Harshvardhan/Documents/enigma_test/data"
CURRENT_ROI= "GCC"
logDir="/Users/Harshvardhan/Documents/enigma_test/logs/"        ## directory to be created to output the log files
resDir="/Users/Harshvardhan/Documents/enigma_test/results/"   ## directory to be created for your results!
subjects_cov<-"/Users/Harshvardhan/Documents/enigma_test/data/covariates.csv"
Config_Path<-"/Users/Harshvardhan/Documents/enigma_test/scripts/test_config.csv"
Config_Path
library(ppcor)
library(matrixStats)
# uncomment when moments library is installed..
library(moments)
#--0.
require(RCurl)
read_web_csv<-function(url_address){
gdoc3=paste(url_address,'/export?format=csv&id=KEY',sep='')
myCsv <- getURL(gdoc3,.opts=list(ssl.verifypeer=FALSE))
csv_res<-read.csv(textConnection(myCsv),header = TRUE,stringsAsFactors = FALSE)
return (csv_res)
}
read_web_csv1<-function(url_address){
csv_res<-read.csv(url_address,header = TRUE,stringsAsFactors = FALSE)
return (csv_res)
}
SitePostfix<-SITE
RUN_ID=paste(ID,'_',CURRENT_ROI,sep='')
RUN_ID
ROI<-eval(parse(text=paste('c("SubjID","',CURRENT_ROI,'")',sep='')))
LOG_FILE<-paste(logDir, '/',RUN_ID,'_',SITE,'.log',sep='')
Results_CSV_Path<-paste(resDir,'/',RUN_ID,'_',sep='')
Subjects_Path<-subjects_cov
Subjects_Path
config_csv<-read_web_csv1(Config_Path)
config_csv
config_currentRun<-config_csv[grep(ID, config_csv$ID, ignore.case=T),]
if(nrow(config_currentRun)>1) {
cat (paste("Error: number of rows with ID ",ID," is more than 1. Row must be unique.",sep=''))
stop()
}
RUN_ID
config_currentRun
AnalysisList_Path<-config_currentRun$AnalysisList_Path
DemographicsList_Path<-config_currentRun$DemographicsList_Path
DemographicsList_Path
#cat(paste("Analysis list path: ",AnalysisList_Path,sep=''))
TYPE<-config_currentRun$Type
TRAIT_LIST<-config_currentRun$Trait
TRAIT_LIST<-gsub("[[:space:]]", "", TRAIT_LIST)
TRAIT_LIST<-gsub(";","\",\"",TRAIT_LIST)
METRICS<-eval(parse(text=paste('c("',TRAIT_LIST,'")',sep='')))
TRAIT_LIST
READ_FROM_CSV=(TYPE=='csv')
CSV_ROI_NAMES<-as.list(rep(NA,times=length(METRICS)))
CSV_ROI_NAMES
METRICS
names(CSV_ROI_NAMES)<-METRICS
names
names()
for (elem in names(CSV_ROI_NAMES)) {
CSV_ROI_NAMES[[elem]]<-ROI
}
RAW_EXT=".raw"
CSV_ROI_NAMES
setwd(DATADIR)
CSV_ROI_NAMES
DATADIR
#--2. CONFIG FILE PARSING ROUTINES
str_extract_di<-function(strFilter1,strPattern){
str_list=gregexpr(strPattern,strFilter1)[[1]]
res<-c()
for (i in 1:length(str_list)) {
cur_elem=substr(strFilter1,str_list[i],str_list[i]+attr(str_list,"match.length")[i]-1)
res<-c(res,cur_elem)
}
return (res)
}
DATADIR
get1FilterString<-function(strFilter1,strDataset){
strForGSub=paste(strDataset,'$\\1',sep='')
strCodeFilter1<-gsub("__(.*?)__",strForGSub,strFilter1) #removing "__" around variables
arrStrArguments<-str_extract_di(strFilter1,"__(.*?)__")[[1]] #extracting all arguments to check for !=NA
arrArgToCheck<-c()
strForGSubIsNA=paste('(!is.na(',strDataset,'$',sep='')
iArg=1
for (arrName in arrStrArguments){
arg<-substr(arrName,3,nchar(arrName)-2)
arrArgToCheck[iArg]=paste(strForGSubIsNA,arg,'))',sep='')
iArg=iArg+1
}
strNACheck<-paste(arrArgToCheck,collapse='&') #concatenating all arguments for !=NA
strNACheck<-paste('(',strNACheck,')',sep='') # wrapping into brackets
filter1String<-paste('((',strCodeFilter1,')&',strNACheck,')',sep='')
return(filter1String)
}
getFullFilterString<-function(strFilterLeft,strFilterRight,strDataset){
if (strFilterLeft!="" && (!is.na(strFilterLeft))){
if(strFilterRight!="" && (!is.na(strFilterRight)))
return (paste('(',get1FilterString(strFilterLeft,strDataset),'|',get1FilterString(strFilterRight,strDataset),')',sep=''))
else
return (paste(get1FilterString(strFilterLeft,strDataset),sep=''))
}
else
return("")
}
getMainFactorString<-function(strMainFactor){
if(length(grep(".*:.*",strMainFactor))>0){
fInteract=strsplit(strMainFactor,':')[[1]]
}
else {
fInteract=strMainFactor
}
for (c in 1:length(fInteract)){
#    fInteract[c]=str_replace_all(fInteract[c],"\\(","\\\\(")
#    fInteract[c]=str_replace_all(fInteract[c],"\\)","\\\\)")
fInteract[c]=gsub("\\(","\\\\(",fInteract[c])
fInteract[c]=gsub("\\)","\\\\)",fInteract[c])
fInteract[c]=paste(fInteract[c],'.*',sep='')
}
strRegexp=paste(fInteract,collapse=':')
return(strRegexp)
}
getTstatFactorName<-function(coeffFactorName,rowCoeffNames){
coeffName=getMainFactorString(coeffFactorName)
for (i in 1:length(rowCoeffNames)) {
factorName=grep(coeffName,rowCoeffNames[i],value=TRUE)
if (length(factorName)!=0) break
}
if(length(factorName)==0) {
print(paste("Couldn't find a factor for: ", coeffName,sep=''))
return(character(0))
}
return(factorName)
}
getLmText<-function(lmCoreText,siteRegr,covNames){
SiteRegexp="Site[0-9]+"
if(siteRegr=="all"){
for(cname in covNames){
siteRegressor=grep(SiteRegexp,cname,value=TRUE)
if (length(siteRegressor)>0){
lmCoreText<-paste(lmCoreText,'+',siteRegressor,sep='')
}
}
return(lmCoreText)
}
else if(siteRegr==""){
return(lmCoreText)
}
else {
siteRegressors=paste(str_split(siteRegr,';')[[1]],collapse='+')
lmCoreText<-paste(lmCoreText,'+',siteRegressors,sep='')
return(lmCoreText)
}
}
DATADIR
RUN_ID
d.t.unpaired<-function(t.val,n1,n2){
d<-t.val*sqrt((n1+n2)/(n1*n2))
names(d)<-"effect size d"
return(d)
}
partial.d<-function(t.val,df,n1,n2){
d<-t.val*(n1+n2)/(sqrt(n1*n2)*sqrt(df))
names(d)<-"effect size d"
return(d)
}
CI1<-function(ES,se){
ci<-c((ES-(1.96)*se),(ES+(1.96)*se))
names(ci)<-c("95% CI lower","95% CI upper")
return(ci)
}
se.d2<-function(d,n1,n2){
se<-sqrt((n1+n2)/(n1*n2)+(d^2)/(2*(n1+n2-2)))
names(se)<-"se for d"
return(se)
}
Subjects_Path
dsSubjectsCov<-read.csv(Subjects_Path, header = TRUE)
dsSubjectsCov
Exclude_Path
AnalysisList_Path
getwd()
dsAnalysisConf<-read_web_csv1(AnalysisList_Path)
dsAnalysisConf
#get covariate metrics for demographics.
dsDemogCOV=dsDemographicsConf[which(dsDemographicsConf$Type=="COV"),]
#read demographic configuration file
dsDemographicsConf<-read_web_csv1(DemographicsList_Path)
dsDemographicsConf
#get covariate metrics for demographics.
dsDemogCOV=dsDemographicsConf[which(dsDemographicsConf$Type=="COV"),]
strAllCov<-list()
for (iCOV in 1:nrow(dsDemogCOV)){
if (dsDemogCOV$Active[iCOV]==0) next
var=paste(dsDemogCOV$Type[iCOV],'_',dsDemogCOV$varname[iCOV],sep='')
if (dsDemogCOV$Filter[iCOV]==""){
eval(parse(text=paste(var,'=1:nrow(dsSubjectsCov)',sep=''))) #if there's no filter, select all
}
else{
eval(parse(text=paste(var,'=','which',get1FilterString(dsDemogCOV$Filter[iCOV],'dsSubjectsCov'),sep='')))
}
stFunc=strsplit(dsDemogCOV$Stats[iCOV],';')[[1]]
stVars=strsplit(dsDemogCOV$StatsNames[iCOV],';')[[1]]
stVarToSave<-c(length(stVars))
if (length(stFunc)!=length(stVars)){
cat ("For variable: ", dsDemogCOV$varname[iCOV], "length of Statistics functions and Statistics variable names is not equal! Proceeding with the next variable\n")
next
}
for(iCur in 1:length(stVars)){
postfix=ifelse(((dsDemogCOV$Postfix[iCOV]=="")|(is.na(dsDemogCOV$Postfix[iCOV]))),"",paste('.',dsDemogCOV$Postfix[iCOV],sep=''))
#    a1=paste(var,'.',stVars[iCur],postfix,'=',stFunc[iCur],'(dsSubjectsCov$',dsDemogCOV$Covariate[iCOV],'[',var,']',',na.rm=TRUE)\n',sep='')
eval(parse(text=paste(var,'.',stVars[iCur],postfix,'=',stFunc[iCur],'(dsSubjectsCov$',dsDemogCOV$Covariate[iCOV],'[',var,']',',na.rm=TRUE)\n',sep='')))
stVarToSave[iCur]=paste(var,'.',stVars[iCur],postfix,sep='')
}
strForSave=paste(stVarToSave,collapse=',')
if(dsDemogCOV$SepFile[iCOV]==1){
#    strForSave=paste(stVarToSave,collapse=',')
cat("Using sepfile=1 for COV section is deprecated\n")
#	cat(paste('save(',strForSave,',CURRENT_ROI,','file=\'',dsDemogCOV$Type[iCOV],'_',dsDemogCOV$varname[iCOV],'.RData\')',sep=''))
#    eval(parse(text=paste('save(',strForSave,',CURRENT_ROI,','file=\'',dsDemogCOV$Type[iCOV],'_',dsDemogCOV$varname[iCOV],'.RData\')',sep='')))
}
strAllCov<-c(strAllCov,strForSave)
}
#save all covariates into 1 file
strAllCovToSave=paste(strAllCov,collapse=',')
eval(parse(text=paste('save(',strAllCovToSave,',file=\'',Results_CSV_Path,'COVARIATES.RData\')',sep='')))
dsDemogNUM=dsDemographicsConf[which(dsDemographicsConf$Type=="NUM"),]
